import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.api as sm
import re

def IR_Flag(rate):
    if rate > .12:
        return True
    else:
        return False

def num_strip_rt(data):
    if '%' in data:
        data = data.rstrip('%')
        data = float(data) / 100
        
    return data
    

def get_int_from_text(data):
#     data = re.search('[0-9]*', data).group(0)
    data = re.findall('[0-9]+', data) # produces a 1 item list
   
    try:
        return data[0]
    except: 
        return -1
    

def get_data():
    raw_data = pd.read_csv('https://spark-public.s3.amazonaws.com/dataanalysis/loansData.csv')
    return raw_data

def clean_data(raw_data):
	raw_data.dropna(inplace=True) # drop the na rows
	# clean fico range and get score 
	raw_data['FICO.Score'] = map(lambda x: int(x.split('-')[0]), raw_data['FICO.Range']) # clean fico range and get score #ask Kyle why this runs so slow

	# raw_data['Debt.To.Income.Ratio'] = [num_strip_rt(data) for index, data in raw_data['Debt.To.Income.Ratio'].iteritems()]
	# raw_data['Debt.To.Income.Ratio'].astype(float)
	raw_data['Interest.Rate'] = [num_strip_rt(data) for index, data in raw_data['Interest.Rate'].iteritems()]
	# raw_data['Loan.Length'] = [get_int_from_text(data) for index, data in raw_data['Loan.Length'].iteritems()]
	# raw_data['Employment.Length2'] = [get_int_from_text(data) for index, data in raw_data['Employment.Length'].iteritems()]
	# raw_data = raw_data[raw_data['Employment.Length2'] > 0] # delete any employment length -1 generated by original N/A
	# raw_data['Loan.Length'] = raw_data['Loan.Length'].astype(int)
	#  # add rate flag
	raw_data['IR_TF'] = [IR_Flag(rate) for index, rate in raw_data['Interest.Rate'].iteritems()]
	# raw_data['OWN'] = [own(desc) for index, desc in raw_data['Home.Ownership'].iteritems()]
	raw_data['constant']= 1

	return raw_data

def enhance_data(df):
	df['annual_inc'] = df['Monthly.Income'] * 12
	return df

def logreg(df):

	# ind_vars2 = ['FICO.Score','Amount.Funded.By.Investors','constant'] # changing to amount requested to be consistent with previous lesson
	ind_vars2 = ['FICO.Score','Amount.Requested','constant'] # changing to amount requested to be consistent with previous lesson
	
	logit = sm.Logit(df['IR_TF'], df[ind_vars2])
	logmodel = logit.fit()
	return logmodel
	
def linreg(df):  #modifying this to refelct the multiple regression exercise
	#Use income (annual_inc) to model interest rates (int_rate).
	intrate = df['Interest.Rate']
	annualinc = df['annual_inc']

	# intrate is dependent variable
	y = np.matrix(intrate).transpose()

	# A single independent variable
	x = np.matrix(annualinc).transpose()

	X = sm.add_constant(x)

	model = sm.OLS(y,X)
	linmodel = model.fit()
	print(linmodel.summary)
	return(linmodel)
	# intrate = df['Interest.Rate']
	# loanamt = df['Amount.Requested']
	# fico = df['FICO.Score']

	# # The dependent variable
	# y = np.matrix(intrate).transpose()
	# # The independent variables shaped as columns
	# x1 = np.matrix(fico).transpose()
	# x2 = np.matrix(loanamt).transpose()

	# x = np.column_stack([x1,x2])

	# X = sm.add_constant(x)
	# model = sm.OLS(y,X)
	# f = model.fit()
	# linmodel = f
	# print(f.summary())
	# print("The linear regression model predicts interest rate of {} ".format(f.predict([1,750,10000])))
	# print("with fico 750 and loan amount 10,000")
	# return linmodel


	
def print_result(logmodel):
	coeff = logmodel.params
	print(coeff)
	print(logmodel.summary())
	print("The logit regression predicts the likelihood our interest rate will")
	print("be > 12 percent with fico 750 and loan amount $10,000 as {}".format(logmodel.predict([1,750,10000])))
	return 

# def justmodels():
# 	analyze_it()
# 	return(linmodel, logmodel)

def analyze_it():
	raw_data = get_data()
	df = clean_data(raw_data)
	df = enhance_data(df)
	linmodel = linreg(df)
	return(df, linmodel)

	# logmodel = logreg(df)
	# print_result(logmodel)
	# linmodel = linreg(df)
	# print(df.head())
	# return(df, linmodel,logmodel)

   
def main():
    analyze_it()

if __name__ == "__main__":
    main()


### stats model predict vs numpy predict
