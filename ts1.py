import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.api as sm
import re
import os.path as osp # makes it so we can substitute forward slash for backslash minimizing character escape headaches
import sys


def get_data(mypath, filename, url):
	# See if we have the file locally.  If so use it.  If not stop
	# https://resources.lendingclub.com/LoanStats3b.csv.zip - This is the URL - not going to mess with zipfile import for this exercise.
	try: 
		df = pd.read_csv(osp.normpath(mypath + filename), header=1, low_memory=False) #  index_col=0 - This index statement causes an error when we try to read saved file for some reason?
		return df
	except IOError:
		print("Sorry - Can't find the input file on disk or online or couldn't write it once found")
		sys.exit(1) # stop processing 
    
def clean_data(df):
	return df

def enhance_data(df):
	return df

def analyze_it():
	# Set up constants for file IO
	mypath = 'C:/Users/bob071988/thinkful/projects/ds-lesson3/'
	filename = 'LoanStats3b.csv'
	url = ''
	# Execute the functions to prepare the df
	df = get_data(mypath, filename, url)
	df = clean_data(df)
	df = enhance_data(df)
	# create the models
	## TBD
	# return df and models
	return(df)

	   
def main():
    analyze_it()

if __name__ == "__main__":
    main()


### stats model predict vs numpy predict
	# raw_data.dropna(inplace=True) # drop the na rows
	# # clean fico range and get score 
	# raw_data['FICO.Score'] = map(lambda x: int(x.split('-')[0]), raw_data['FICO.Range']) # clean fico range and get score #ask Kyle why this runs so slow

	# # raw_data['Debt.To.Income.Ratio'] = [num_strip_rt(data) for index, data in raw_data['Debt.To.Income.Ratio'].iteritems()]
	# # raw_data['Debt.To.Income.Ratio'].astype(float)
	# raw_data['Interest.Rate'] = [num_strip_rt(data) for index, data in raw_data['Interest.Rate'].iteritems()]
	# # raw_data['Loan.Length'] = [get_int_from_text(data) for index, data in raw_data['Loan.Length'].iteritems()]
	# # raw_data['Employment.Length2'] = [get_int_from_text(data) for index, data in raw_data['Employment.Length'].iteritems()]
	# # raw_data = raw_data[raw_data['Employment.Length2'] > 0] # delete any employment length -1 generated by original N/A
	# # raw_data['Loan.Length'] = raw_data['Loan.Length'].astype(int)
	# #  # add rate flag
	# raw_data['IR_TF'] = [IR_Flag(rate) for index, rate in raw_data['Interest.Rate'].iteritems()]
	# # raw_data['OWN'] = [own(desc) for index, desc in raw_data['Home.Ownership'].iteritems()]
	# raw_data['constant']= 1

	# df['annual_inc'] = df['Monthly.Income'] * 12
